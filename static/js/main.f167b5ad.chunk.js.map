{"version":3,"sources":["BugListTable.js","App.js","reportWebVitals.js","index.js"],"names":["BugListTable","bugList","deleteBug","length","map","bug","description","priority","onClick","id","App","useState","newBugDescription","setNewBugDescription","newBugPriority","setNewBugPriority","setBugList","className","bugs","filter","onSubmit","event","preventDefault","newBug","uuid","htmlFor","type","value","onChange","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAoCeA,EApCM,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAI/B,OACE,kCACE,gCACE,+BACE,6CACA,0CACA,4BAGJ,kCACsB,IAAnBD,EAAQE,QACP,6BACE,iDAGHF,EAAQE,OAAS,GAChBF,EAAQG,KAAI,SAACC,GAAD,OACV,+BACE,6BAAKA,EAAIC,cACT,6BAAKD,EAAIE,WACT,6BACE,wBAAQC,QAAS,kBAxBNC,EAwB4BJ,EAAII,QAvBvDP,EAAUO,GADY,IAACA,GAwBX,0BAJKJ,EAAII,cCqCVC,EApDH,WACV,MAAkDC,mBAAS,IAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOV,EAAP,KAAgBe,EAAhB,KAmBA,OACE,sBAAKC,UAAU,MAAf,UACE,0DACA,cAAC,EAAD,CAAchB,QAASA,EAASC,UAAW,SAACO,GAAD,OAR7B,SAACA,GACjB,IAAMS,EAAOjB,EAAQkB,QAAO,SAACd,GAAD,OAASA,EAAII,KAAOA,KAChDO,EAAWE,GAM0ChB,CAAUO,MAC7D,uBAAMQ,UAAU,mBAAmBG,SArBxB,SAACC,GACdA,EAAMC,iBACN,IAAMC,EAAS,CACbd,GAAIe,cACJlB,YAAaM,EACbL,SAAUO,GAEZE,EAAW,GAAD,mBAAKf,GAAL,CAAcsB,KACxBV,EAAqB,IACrBE,EAAkB,WAYhB,UACE,uBAAOU,QAAQ,oBAAf,kCACA,uBACEC,KAAK,OACL,cAAY,qBACZjB,GAAG,oBACHkB,MAAOf,EACPgB,SAAU,SAACP,GAAD,OAAWR,EAAqBQ,EAAMQ,OAAOF,UAEzD,uBAAOF,QAAQ,iBAAf,gCACA,yBACEG,SAAU,SAACP,GAAD,OAAWN,EAAkBM,EAAMQ,OAAOF,QACpDA,MAAOb,EAFT,UAIE,wBAAQa,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,qBAEF,wBAAQ,cAAY,UAAUD,KAAK,SAAnC,gCCtCOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f167b5ad.chunk.js","sourcesContent":["const BugListTable = ({ bugList, deleteBug }) => {\r\n  const resolvedPressed = (id) => {\r\n    deleteBug(id);\r\n  };\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Description</th>\r\n          <th>Priority</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {bugList.length === 0 && (\r\n          <tr>\r\n            <td>No Bugs Found</td>\r\n          </tr>\r\n        )}\r\n        {bugList.length > 0 &&\r\n          bugList.map((bug) => (\r\n            <tr key={bug.id}>\r\n              <td>{bug.description}</td>\r\n              <td>{bug.priority}</td>\r\n              <td>\r\n                <button onClick={() => resolvedPressed(bug.id)}>\r\n                  Resolved\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default BugListTable;\r\n","import React, { useState } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport \"./App.css\";\nimport BugListTable from \"./BugListTable\";\n\nconst App = () => {\n  const [newBugDescription, setNewBugDescription] = useState(\"\");\n  const [newBugPriority, setNewBugPriority] = useState(\"\");\n  const [bugList, setBugList] = useState([]);\n\n  const addBug = (event) => {\n    event.preventDefault();\n    const newBug = {\n      id: uuid(),\n      description: newBugDescription,\n      priority: newBugPriority,\n    };\n    setBugList([...bugList, newBug]);\n    setNewBugDescription(\"\");\n    setNewBugPriority(\"Medium\");\n  };\n\n  const deleteBug = (id) => {\n    const bugs = bugList.filter((bug) => bug.id !== id);\n    setBugList(bugs);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>üêû Bug Tracker</h1>\n      <BugListTable bugList={bugList} deleteBug={(id) => deleteBug(id)} />\n      <form className=\"add-new-bug-form\" onSubmit={addBug}>\n        <label htmlFor=\"newBugDescription\">New Bug Description:</label>\n        <input\n          type=\"text\"\n          data-testid=\"newbug-description\"\n          id=\"newBugDescription\"\n          value={newBugDescription}\n          onChange={(event) => setNewBugDescription(event.target.value)}\n        />\n        <label htmlFor=\"newBugPriority\">New Bug Priority: </label>\n        <select\n          onChange={(event) => setNewBugPriority(event.target.value)}\n          value={newBugPriority}\n        >\n          <option value=\"Low\">Low</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"High\">High</option>\n        </select>\n        <button data-testid=\"add-bug\" type=\"submit\">\n          Add New Bug\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}